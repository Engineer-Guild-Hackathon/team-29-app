diff --git a/kaiho_zukan/frontend/lib/screens/post_problem_form.dart b/kaiho_zukan/frontend/lib/screens/post_problem_form.dart
index 8ac28ff..ab0c605 100644
--- a/kaiho_zukan/frontend/lib/screens/post_problem_form.dart
+++ b/kaiho_zukan/frontend/lib/screens/post_problem_form.dart
@@ -755,7 +755,7 @@ class _PostProblemFormState extends State<PostProblemForm> {
               crossAxisAlignment: CrossAxisAlignment.stretch,
               children: [
                 if (widget.editId != null) ...[
-                  Row(children: [
+                  Wrap(\n                  spacing: 12,\n                  runSpacing: 12,\n                  crossAxisAlignment: WrapCrossAlignment.center,\n                  children: [
                     Chip(label: Text('問題いいね: $likeCount')),
                     const SizedBox(width: 8),
                     Chip(label: Text('解説いいね: $explLikeCount')),
@@ -776,7 +776,7 @@ class _PostProblemFormState extends State<PostProblemForm> {
                   decoration: const InputDecoration(labelText: '問題文'),
                 ),
                 const SizedBox(height: 8),
-                Row(children: [
+                Wrap(\n                  spacing: 12,\n                  runSpacing: 12,\n                  crossAxisAlignment: WrapCrossAlignment.center,\n                  children: [
                   const Text('種別: '),
                   DropdownButton<String>(
                     value: qtype,
@@ -788,7 +788,7 @@ class _PostProblemFormState extends State<PostProblemForm> {
                         ? null
                         : (v) => setState(() => qtype = v ?? 'mcq'),
                   ),
-                  const Spacer(),
+                  SizedBox(width: 12),
                   DropdownButton<int>(
                     value: parentId,
                     items: parents
@@ -858,7 +858,7 @@ class _PostProblemFormState extends State<PostProblemForm> {
                 Column(
                   crossAxisAlignment: CrossAxisAlignment.start,
                   children: [
-                    Row(children: [
+                    Wrap(\n                  spacing: 12,\n                  runSpacing: 12,\n                  crossAxisAlignment: WrapCrossAlignment.center,\n                  children: [
                       const Text('問題画像'),
                       const SizedBox(width: 8),
                       if (!widget.explainOnly)
@@ -917,11 +917,9 @@ class _PostProblemFormState extends State<PostProblemForm> {
                                         ),
                                       ),
                                     ),
-                                ],
-                              ),
+                                ],\n                ),
                             ),
-                      ],
-                    ),
+                      ],\n                ),
                     // OCR button under problem image preview (only when new images exist)
                     Builder(builder: (_) {
                       final hasTargets = newImages.any((f) => f.bytes != null && f.bytes!.isNotEmpty);
@@ -940,13 +938,12 @@ class _PostProblemFormState extends State<PostProblemForm> {
                         ),
                       );
                     }),
-                  ],
-                ),
+                  ],\n                ),
 
                 // ===== 選択肢・解説 =====
                 if (qtype == 'mcq') ...[
                   const SizedBox(height: 8),
-                  Row(children: [
+                  Wrap(\n                  spacing: 12,\n                  runSpacing: 12,\n                  crossAxisAlignment: WrapCrossAlignment.center,\n                  children: [
                     const Text('選択肢数: '),
                     DropdownButton<int>(
                       value: optionCount,
@@ -984,7 +981,7 @@ class _PostProblemFormState extends State<PostProblemForm> {
                           child: Column(
                             crossAxisAlignment: CrossAxisAlignment.start,
                             children: [
-                              Row(children: [
+                              Wrap(\n                  spacing: 12,\n                  runSpacing: 12,\n                  crossAxisAlignment: WrapCrossAlignment.center,\n                  children: [
                                 Checkbox(
                                   value: widget.explainOnly ? (myModelAnswerIndex == i) : (correctIndex == i),
                                   onChanged: (v) {
@@ -1012,8 +1009,7 @@ class _PostProblemFormState extends State<PostProblemForm> {
                                 decoration: const InputDecoration(labelText: '解説'),
                                 maxLines: 3,
                               ),
-                            ],
-                          ),
+                            ],\n                ),
                         ),
                       );
                     }),
@@ -1052,7 +1048,7 @@ class _PostProblemFormState extends State<PostProblemForm> {
                 Column(
                   crossAxisAlignment: CrossAxisAlignment.start,
                   children: [
-                    Row(children: [
+                    Wrap(\n                  spacing: 12,\n                  runSpacing: 12,\n                  crossAxisAlignment: WrapCrossAlignment.center,\n                  children: [
                       const Text('解説画像'),
                       const SizedBox(width: 8),
                       // ★ 解説投稿モードでも使えるように、explainOnly でもボタン有効にする
@@ -1103,11 +1099,9 @@ class _PostProblemFormState extends State<PostProblemForm> {
                                       ),
                                     ),
                                   ),
-                                ],
-                              ),
+                                ],\n                ),
                         ),
-                      ],
-                    ),
+                      ],\n                ),
                     // OCR button under explanation image preview
                     Builder(builder: (_) {
                       final hasTargets = newExplainImages.any((f) => f.bytes != null && f.bytes!.isNotEmpty);
@@ -1128,8 +1122,7 @@ class _PostProblemFormState extends State<PostProblemForm> {
                         ),
                       );
                     }),
-                  ],
-                ),
+                  ],\n                ),
 
                 const SizedBox(height: 16),
                 // ===== ガイドライン同意（常時表示） =====
@@ -1177,8 +1170,7 @@ class _PostProblemFormState extends State<PostProblemForm> {
                     child: Text(widget.editId == null ? '作成して一覧へ' : '更新する'),
                   ),
                 ),
-              ],
-            ),
+              ],\n                ),
           ),
         ),
       ),
@@ -1212,8 +1204,7 @@ class _ImagesPagerState extends State<_ImagesPager> {
             alignment: Alignment.center,
             child: Padding(
               padding: const EdgeInsets.all(4),
-              child: widget.widgets[i],
-            ),
+              child: widget.widgets[i],\n                ),
           ),
         ),
       ),
@@ -1250,3 +1241,4 @@ class _ImagesPagerState extends State<_ImagesPager> {
 
 
 
+
